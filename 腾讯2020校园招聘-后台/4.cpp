/*
由于业绩优秀，公司给小Q放了 n 天的假，身为工作狂的小Q打算在在假期中工作、锻炼或者休息。他有个奇怪的习惯：不会连续两天工作或锻炼。
只有当公司营业时，小Q才能去工作，只有当健身房营业时，小Q才能去健身，小Q一天只能干一件事。
给出假期中公司，健身房的营业情况，求小Q最少需要休息几天。

输入描述:
第一行一个整数  表示放假天数
第二行 n 个数 每个数为0或1,第 i 个数表示公司在第 i 天是否营业
第三行 n 个数 每个数为0或1,第 i 个数表示健身房在第 i 天是否营业
（1为营业 0为不营业）

输出描述:
一个整数，表示小Q休息的最少天数
*/

/*
dp[i][0] , dp[i][1], dp[i][2] 分别记录第i天 休息/锻炼/工作 累计的最小休息天数
*/

#include <bits/stdc++.h>
using namespace std;

int work[100001];   // 工作数组
int fit[100001];    // 健身数组
int dp[100001][3];
int main() {
    int n;
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> work[i];
    }
    for(int i = 0; i < n; i++) {
        cin >> fit[i];
    }
    fill(dp[0], dp[0]+300003, INT_MAX);
    dp[0][0] = dp[0][1] = dp[0][2] = 0;
    for(int i = 1; i <= n; i++) {
        dp[i][0] = min(dp[i-1][0], min(dp[i-1][1], dp[i-1][2])) + 1;
        if(work[i-1]) {
            dp[i][1] = min(dp[i-1][0], dp[i-1][2]);
        }
        if(fit[i-1]) {
            dp[i][2] = min(dp[i-1][0], dp[i-1][1]);
        }
    }
    cout << min(dp[n][0], min(dp[n][1], dp[n][2])) << endl;
    return 0;
}